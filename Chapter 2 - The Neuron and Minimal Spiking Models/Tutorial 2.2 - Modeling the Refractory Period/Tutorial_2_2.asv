%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%% Begin by initializing all constants %%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Given values for the leaky integrate-and-fire neuron model
E_l = -70.0;
R_m = 5.0;
C_m = 2.0;

V_th = -50.0;
V_reset = -65.0;

%Create time vector
delta_t = 0.01;
t = 0:delta_t:2;

%Create vector of applied I (current) values
I_app = 100:100:600;



% Q1 - Forced Voltage Clamp

%Create vector to store membrane potentials at time t
%Set initial value of the membrane potential vector to E_l
V = zeros(1, length(t));
V(1) = E_l;

%Create vector to store number of neuron fires for each trial
neuron_fires = zeros(1, length(I_app));

%Create vector to store firing rate for each trial
firing_rate_Q1 = zeros(1, length(I_app));

%Noise variable
sigma_I = 0.0;

%Length of voltage clamp in milliseconds
tau = 0.0025;

%Create vector to store mean membrane potential for each trial
mean_membrane_potential_Q1 = zeros(1, length(I_app));

%Loop through applied current values
for j = 1:length(I_app)
    %Variable to store time of last spike
    time_of_last_spike = -tau - 1;

    %Creating vector of noise variables
    noise_vec = randn(size(t)) * sigma_I * sqrt(delta_t);
    
    %Create vector to store membrane potential values
    V = zeros(1, length(t));
    V(1) = E_l;
    %Loop through time vector
    for i = 2:length(t)
        dxdt = (E_l - V(i-1))/R_m + I_app(j);
        dxdt = dxdt*(1/C_m);
    
        V(i) = V(i-1) + delta_t * dxdt + noise_vec(i);
        
        %Check if neuron is still within the refractory period
        if t(i) < time_of_last_spike + tau
            V(i) = V_reset;
        end
        
        %Check if membrane potential is above threshold
        if V(i) > V_th
           time_of_last_spike = t(i);
           V(i) = V_reset;
           neuron_fires(j) = neuron_fires(j) + 1;
        end
        
    end
    
    %Caclulate firing rate
    firing_rate_Q1(j) = neuron_fires(j)/2;
    
    mean_membrane_potential_Q1(j) = mean(V);
end


% Q2 - Threshold Increase

tau = 0.001;

V_th = zeros(1, length(t));
V_th(1) = -50.0;

V = zeros(1, length(t));
V(1) = E_l;

%Loop through applied current values
for j = 1:length(I_app)
    %Creating vector of noise variables
    noise_vec = randn(size(t)) * sigma_I * sqrt(delta_t);
    
    %Create vector to store membrane potential values
    V = zeros(1, length(t));
    V(1) = E_l;
    %Loop through time vector
    for i = 2:length(t)
        dxdt = (E_l - V(i-1))/R_m + I_app(j);
        dxdt = dxdt*(1/C_m);
    
        V(i) = V(i-1) + delta_t * dxdt + noise_vec(i);
        
        V_th(i) = V_th(i-1) + delta_t * (V_th(1) - V_th(i-1))/tau;
                
        %Check if membrane potential is above threshold
        if V(i) > V_th(i)
           V(i) = V_reset;
           V_th(i+1) = 200;
           neuron_fires(j) = neuron_fires(j) + 1;
        end
        
    end
    
    %Caclulate firing rate
    firing_rate_Q1(j) = neuron_fires(j)/2;
    
    mean_membrane_potential_Q2(j) = mean(V);
end

plot(t, V);


